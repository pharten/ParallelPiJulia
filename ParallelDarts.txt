I have run the enclosed ParallelPiJulia program to determine the speedup
of an embarrassingly parallel Markovian program on a Windows desktop that
has 2 CPU's with 20 cores each.  Eclipse IDE Java 2018-09 with JuliaDT
installed was used to run the ParallelPi program.

ParallelPi throws darts randomly at a dartboard. The number of darts that
fall within the unit circle is the approximately the area of the unit
circle = Pi*(r**2). The total number of darts thrown is approximately the
area of the square enclosing the unit circle = 4 * (r**2). From this, it
can be seen that one area divided by the other is Pi / 4.

This relationship can be used to calculate Pi to extreme accuracy along
with an uncertainty which is only dependent on the number of darts thrown.
Since the results of each Markovian path are totally independent, the final
Pi can be averaged over individual Pi's along with an uncertainty calculated from the standard deviation of Pi values generated
by each processor (core).

The results were:

  Number of darts  Number of cores  Runtime(secs)
	1x10**10			1				55.2
						2				35.0
						3				28.5
						4				23.3
						5				20.1
						6				18.2
						
	1x10**11			1				518.6
						2				244.6
						3				173.2
						4				123.6
						5				100.4
						6				 88.7
						7				 77.1
						8				 68.9
						16				 45.9
						24				 42.8
						32				 39.8
						
	1x10**12			8				607.9
						16				333.4
						24				275.7
						32				247.9		
	
This shows an almost linear relationship between the speedup and the
number of cores.  By definition, a linear relationship is embarrassingly
parallel.  The speedup is the runtime using 1 processor divided by the
runtime using n processors.

All Pi calculations were within a few uncertainties of Pi.

**Note that the timing was four times longer after changing from Julia 1.2
to Julia 1.3.  The new capability of generating thread-safe random numbers
takes four times longer. One way around this problem is shown at:
https://github.com/JuliaLang/julia/issues/34216
				 